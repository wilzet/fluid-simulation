import os
from typing import Dict, List, Any

# PATH TO GLSL FILES
inPath = "./src/shaders"

# RUST FILE TO OUTPUT TO
outPath = "./src/shaders.rs"

def main():
    # READ SHADER FILES
    shaders: Dict[str, str] = {}
    for file in os.listdir(os.fsencode(inPath)):
        filename = os.fsdecode(file)
        if not filename.endswith(".glsl"):
            continue

        with open(os.path.join(inPath, filename)) as f:
            shaders[filename[:-5]] = f.read()

    # VALIDATE
    if len(shaders) < 2:
        raise Exception(
            "There should be at least one fragment shader and one vertex shader in the " + 
            inPath +
            " directory with file endings .glsl"
        )

    # READ VARIABLES
    uniforms: Dict[str, str] = {}
    for k, v in shaders.items():
        for line in v.splitlines():
            for tokens in line.split(';'):
                for i, token in enumerate(tokens.split(' ')):
                    if token == "uniform":
                        name = tokens.split(' ')[i + 2]
                        if not name in uniforms:
                            uniforms[name] = k

    # WRITE TO FILE
    with open(outPath, "w+") as f:
        f.write("// FILE GENERATED BY `glsl-to-rust-stringify.py`")
        for k in shaders.keys():
            # WRITE VARIABLES
            f.write("\n\n")
            for var, val in uniforms.items():
                if val == k:
                    f.write("pub const " + var.upper() + ": &str = \"" + var + "\";\n")

            # WRITE SHADERS
            f.write("pub const " + k.upper() + "_SHADER_SOURCE: &str = \"\n")
            for line in shaders[k].splitlines():
                f.write('\t' + line + '\n')
            f.write("\";")

if __name__ == "__main__":
    main()